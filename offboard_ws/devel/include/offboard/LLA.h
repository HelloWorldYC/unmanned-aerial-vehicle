// Generated by gencpp from file offboard/LLA.msg
// DO NOT EDIT!


#ifndef OFFBOARD_MESSAGE_LLA_H
#define OFFBOARD_MESSAGE_LLA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace offboard
{
template <class ContainerAllocator>
struct LLA_
{
  typedef LLA_<ContainerAllocator> Type;

  LLA_()
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
    }
  LLA_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::offboard::LLA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboard::LLA_<ContainerAllocator> const> ConstPtr;

}; // struct LLA_

typedef ::offboard::LLA_<std::allocator<void> > LLA;

typedef boost::shared_ptr< ::offboard::LLA > LLAPtr;
typedef boost::shared_ptr< ::offboard::LLA const> LLAConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboard::LLA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboard::LLA_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace offboard

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'offboard': ['/home/myc/offboard_ws/src/offboard/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::offboard::LLA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard::LLA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard::LLA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard::LLA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard::LLA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard::LLA_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboard::LLA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c48027a852aeff972be80478ff38e81a";
  }

  static const char* value(const ::offboard::LLA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc48027a852aeff97ULL;
  static const uint64_t static_value2 = 0x2be80478ff38e81aULL;
};

template<class ContainerAllocator>
struct DataType< ::offboard::LLA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboard/LLA";
  }

  static const char* value(const ::offboard::LLA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboard::LLA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
";
  }

  static const char* value(const ::offboard::LLA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboard::LLA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LLA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboard::LLA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboard::LLA_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARD_MESSAGE_LLA_H
